
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    limit_req_zone $binary_remote_addr zone=one:15m rate=3r/s;
    include ip.conf;#封禁ip的文件








    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    #根据seeion来控制访问
    limit_req_zone $binary_remote_addr zone=allips:10m rate=1r/s;

    
    limit_req_zone $uri zone=api_read:20m rate=50r/s;



    server {
        listen       80;
        server_name  localhost;
        limit_req zone=one burst=10 nodelay;
        include block.conf; #防止攻击的文件
        #队列
        limit_req zone=api_read burst=100;

        charset utf-8;

        #连接超时时间
        keepalive_timeout 60;
        tcp_nodelay on;
        client_header_buffer_size 4k;
        open_file_cache max=102400 inactive=20s;
        open_file_cache_valid 30s;
        open_file_cache_min_uses 1;
        client_header_timeout 15;
        client_body_timeout 15;
        reset_timedout_connection on;
        send_timeout 15;
        server_tokens off;
        client_max_body_size 10m;





        #access_log  logs/host.access.log  main;



        #所有静态请求都由nginx处理，存放目录为html
                location ~\.(gif|jpg|jpeg|png|ico|bmp|swf|html|css|js|mp3|mp4)$ {



                    #所有静态资源设置防盗链，除了47.106.67.99可以访问之外其他禁止
                    valid_referers 47.106.67.99;

                    if ($invalid_referer) {
                       return 403;
                    }


                    expires 7d;#缓存7天


                    #是否启动gzip压缩,on代表启动,off代表开启
                        gzip  on;

                        #需要压缩的常见静态资源
                        gzip_types text/plain application/javascript   application/x-javascript text/css application/xml text/javascript application/x-httpd-php;

                        #由于nginx的压缩发生在浏览器端而微软的ie6很坑爹,会导致压缩后图片看不见所以该选
                        gzip_disable "MSIE [1-6]\.";

                        #如果文件大于1k就启动压缩
                        gzip_min_length 1k;

                        #以16k为单位,按照原始数据的大小以4倍的方式申请内存空间,一般此项不要修改
                        gzip_buffers 4 16k;

                        #压缩的等级,数字选择范围是1-9,数字越小压缩的速度越快,消耗cpu就越大
                        gzip_comp_level 2;
                    proxy_cache_valid 404 1m; #对代码200和302的响应设置10分钟的缓存，对代码404的响应设置为1分钟:
                    proxy_cache_valid 200 302 10m;
                    root    html;
                }

                #所有动态请求都转发给tomcat处理

                location ~ .(jsp|jspx|do|class)?$ {



                proxy_set_header Host $host;

                proxy_set_header X-Real-IP $remote_addr;

                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

                proxy_pass http://127.0.0.1:8080;

                }









        #error_page  404              /404.html;



        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }





        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
